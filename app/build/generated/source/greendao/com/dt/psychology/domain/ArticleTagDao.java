package com.dt.psychology.domain;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLE_TAG".
*/
public class ArticleTagDao extends AbstractDao<ArticleTag, Long> {

    public static final String TABLENAME = "ARTICLE_TAG";

    /**
     * Properties of entity ArticleTag.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ArticleTagId = new Property(0, Long.class, "articleTagId", true, "_id");
        public final static Property FatherId = new Property(1, Integer.class, "fatherId", false, "FATHER_ID");
        public final static Property ArticleTagName = new Property(2, String.class, "articleTagName", false, "ARTICLE_TAG_NAME");
    }

    private DaoSession daoSession;


    public ArticleTagDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleTagDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE_TAG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: articleTagId
                "\"FATHER_ID\" INTEGER," + // 1: fatherId
                "\"ARTICLE_TAG_NAME\" TEXT);"); // 2: articleTagName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE_TAG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ArticleTag entity) {
        stmt.clearBindings();
 
        Long articleTagId = entity.getArticleTagId();
        if (articleTagId != null) {
            stmt.bindLong(1, articleTagId);
        }
 
        Integer fatherId = entity.getFatherId();
        if (fatherId != null) {
            stmt.bindLong(2, fatherId);
        }
 
        String articleTagName = entity.getArticleTagName();
        if (articleTagName != null) {
            stmt.bindString(3, articleTagName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ArticleTag entity) {
        stmt.clearBindings();
 
        Long articleTagId = entity.getArticleTagId();
        if (articleTagId != null) {
            stmt.bindLong(1, articleTagId);
        }
 
        Integer fatherId = entity.getFatherId();
        if (fatherId != null) {
            stmt.bindLong(2, fatherId);
        }
 
        String articleTagName = entity.getArticleTagName();
        if (articleTagName != null) {
            stmt.bindString(3, articleTagName);
        }
    }

    @Override
    protected final void attachEntity(ArticleTag entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ArticleTag readEntity(Cursor cursor, int offset) {
        ArticleTag entity = new ArticleTag( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // articleTagId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // fatherId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // articleTagName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ArticleTag entity, int offset) {
        entity.setArticleTagId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFatherId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setArticleTagName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ArticleTag entity, long rowId) {
        entity.setArticleTagId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ArticleTag entity) {
        if(entity != null) {
            return entity.getArticleTagId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ArticleTag entity) {
        return entity.getArticleTagId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
