package com.dt.psychology.domain;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.dt.psychology.domain.Article;
import com.dt.psychology.domain.ArticleTag;
import com.dt.psychology.domain.AttachArticleTag;
import com.dt.psychology.domain.AttachQuestionTag;
import com.dt.psychology.domain.Comment;
import com.dt.psychology.domain.Question;
import com.dt.psychology.domain.QuestionTag;
import com.dt.psychology.domain.User;

import com.dt.psychology.domain.ArticleDao;
import com.dt.psychology.domain.ArticleTagDao;
import com.dt.psychology.domain.AttachArticleTagDao;
import com.dt.psychology.domain.AttachQuestionTagDao;
import com.dt.psychology.domain.CommentDao;
import com.dt.psychology.domain.QuestionDao;
import com.dt.psychology.domain.QuestionTagDao;
import com.dt.psychology.domain.UserDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig articleDaoConfig;
    private final DaoConfig articleTagDaoConfig;
    private final DaoConfig attachArticleTagDaoConfig;
    private final DaoConfig attachQuestionTagDaoConfig;
    private final DaoConfig commentDaoConfig;
    private final DaoConfig questionDaoConfig;
    private final DaoConfig questionTagDaoConfig;
    private final DaoConfig userDaoConfig;

    private final ArticleDao articleDao;
    private final ArticleTagDao articleTagDao;
    private final AttachArticleTagDao attachArticleTagDao;
    private final AttachQuestionTagDao attachQuestionTagDao;
    private final CommentDao commentDao;
    private final QuestionDao questionDao;
    private final QuestionTagDao questionTagDao;
    private final UserDao userDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        articleDaoConfig = daoConfigMap.get(ArticleDao.class).clone();
        articleDaoConfig.initIdentityScope(type);

        articleTagDaoConfig = daoConfigMap.get(ArticleTagDao.class).clone();
        articleTagDaoConfig.initIdentityScope(type);

        attachArticleTagDaoConfig = daoConfigMap.get(AttachArticleTagDao.class).clone();
        attachArticleTagDaoConfig.initIdentityScope(type);

        attachQuestionTagDaoConfig = daoConfigMap.get(AttachQuestionTagDao.class).clone();
        attachQuestionTagDaoConfig.initIdentityScope(type);

        commentDaoConfig = daoConfigMap.get(CommentDao.class).clone();
        commentDaoConfig.initIdentityScope(type);

        questionDaoConfig = daoConfigMap.get(QuestionDao.class).clone();
        questionDaoConfig.initIdentityScope(type);

        questionTagDaoConfig = daoConfigMap.get(QuestionTagDao.class).clone();
        questionTagDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        articleDao = new ArticleDao(articleDaoConfig, this);
        articleTagDao = new ArticleTagDao(articleTagDaoConfig, this);
        attachArticleTagDao = new AttachArticleTagDao(attachArticleTagDaoConfig, this);
        attachQuestionTagDao = new AttachQuestionTagDao(attachQuestionTagDaoConfig, this);
        commentDao = new CommentDao(commentDaoConfig, this);
        questionDao = new QuestionDao(questionDaoConfig, this);
        questionTagDao = new QuestionTagDao(questionTagDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);

        registerDao(Article.class, articleDao);
        registerDao(ArticleTag.class, articleTagDao);
        registerDao(AttachArticleTag.class, attachArticleTagDao);
        registerDao(AttachQuestionTag.class, attachQuestionTagDao);
        registerDao(Comment.class, commentDao);
        registerDao(Question.class, questionDao);
        registerDao(QuestionTag.class, questionTagDao);
        registerDao(User.class, userDao);
    }
    
    public void clear() {
        articleDaoConfig.clearIdentityScope();
        articleTagDaoConfig.clearIdentityScope();
        attachArticleTagDaoConfig.clearIdentityScope();
        attachQuestionTagDaoConfig.clearIdentityScope();
        commentDaoConfig.clearIdentityScope();
        questionDaoConfig.clearIdentityScope();
        questionTagDaoConfig.clearIdentityScope();
        userDaoConfig.clearIdentityScope();
    }

    public ArticleDao getArticleDao() {
        return articleDao;
    }

    public ArticleTagDao getArticleTagDao() {
        return articleTagDao;
    }

    public AttachArticleTagDao getAttachArticleTagDao() {
        return attachArticleTagDao;
    }

    public AttachQuestionTagDao getAttachQuestionTagDao() {
        return attachQuestionTagDao;
    }

    public CommentDao getCommentDao() {
        return commentDao;
    }

    public QuestionDao getQuestionDao() {
        return questionDao;
    }

    public QuestionTagDao getQuestionTagDao() {
        return questionTagDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

}
