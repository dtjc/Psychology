package com.dt.psychology.domain;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HeadPortraitSrc = new Property(1, String.class, "headPortraitSrc", false, "HEAD_PORTRAIT_SRC");
        public final static Property UserPhone = new Property(2, Long.class, "userPhone", false, "USER_PHONE");
        public final static Property UserMail = new Property(3, String.class, "userMail", false, "USER_MAIL");
        public final static Property Alias = new Property(4, String.class, "alias", false, "ALIAS");
        public final static Property Sex = new Property(5, String.class, "sex", false, "SEX");
        public final static Property Age = new Property(6, Integer.class, "age", false, "AGE");
        public final static Property Area = new Property(7, String.class, "area", false, "AREA");
        public final static Property Briefing = new Property(8, String.class, "briefing", false, "BRIEFING");
        public final static Property Password = new Property(9, String.class, "password", false, "PASSWORD");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"HEAD_PORTRAIT_SRC\" TEXT," + // 1: headPortraitSrc
                "\"USER_PHONE\" INTEGER," + // 2: userPhone
                "\"USER_MAIL\" TEXT," + // 3: userMail
                "\"ALIAS\" TEXT," + // 4: alias
                "\"SEX\" TEXT," + // 5: sex
                "\"AGE\" INTEGER," + // 6: age
                "\"AREA\" TEXT," + // 7: area
                "\"BRIEFING\" TEXT," + // 8: briefing
                "\"PASSWORD\" TEXT);"); // 9: password
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String headPortraitSrc = entity.getHeadPortraitSrc();
        if (headPortraitSrc != null) {
            stmt.bindString(2, headPortraitSrc);
        }
 
        Long userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindLong(3, userPhone);
        }
 
        String userMail = entity.getUserMail();
        if (userMail != null) {
            stmt.bindString(4, userMail);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(5, alias);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(7, age);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(8, area);
        }
 
        String briefing = entity.getBriefing();
        if (briefing != null) {
            stmt.bindString(9, briefing);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(10, password);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String headPortraitSrc = entity.getHeadPortraitSrc();
        if (headPortraitSrc != null) {
            stmt.bindString(2, headPortraitSrc);
        }
 
        Long userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindLong(3, userPhone);
        }
 
        String userMail = entity.getUserMail();
        if (userMail != null) {
            stmt.bindString(4, userMail);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(5, alias);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(7, age);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(8, area);
        }
 
        String briefing = entity.getBriefing();
        if (briefing != null) {
            stmt.bindString(9, briefing);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(10, password);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // headPortraitSrc
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // userPhone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userMail
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // alias
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sex
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // age
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // area
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // briefing
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // password
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHeadPortraitSrc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserPhone(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setUserMail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAlias(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAge(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setArea(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBriefing(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPassword(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
