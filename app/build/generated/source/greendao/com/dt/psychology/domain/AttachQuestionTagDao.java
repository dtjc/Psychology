package com.dt.psychology.domain;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTACH_QUESTION_TAG".
*/
public class AttachQuestionTagDao extends AbstractDao<AttachQuestionTag, Long> {

    public static final String TABLENAME = "ATTACH_QUESTION_TAG";

    /**
     * Properties of entity AttachQuestionTag.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property QuestionId = new Property(1, Long.class, "questionId", false, "QUESTION_ID");
        public final static Property QuestionTagId = new Property(2, long.class, "questionTagId", false, "QUESTION_TAG_ID");
    }

    private Query<AttachQuestionTag> questionTag_AttachQuestionTagsQuery;

    public AttachQuestionTagDao(DaoConfig config) {
        super(config);
    }
    
    public AttachQuestionTagDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTACH_QUESTION_TAG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"QUESTION_ID\" INTEGER," + // 1: questionId
                "\"QUESTION_TAG_ID\" INTEGER NOT NULL );"); // 2: questionTagId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTACH_QUESTION_TAG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AttachQuestionTag entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(2, questionId);
        }
        stmt.bindLong(3, entity.getQuestionTagId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AttachQuestionTag entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(2, questionId);
        }
        stmt.bindLong(3, entity.getQuestionTagId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AttachQuestionTag readEntity(Cursor cursor, int offset) {
        AttachQuestionTag entity = new AttachQuestionTag( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // questionId
            cursor.getLong(offset + 2) // questionTagId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AttachQuestionTag entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuestionId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setQuestionTagId(cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AttachQuestionTag entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AttachQuestionTag entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AttachQuestionTag entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "attachQuestionTags" to-many relationship of QuestionTag. */
    public List<AttachQuestionTag> _queryQuestionTag_AttachQuestionTags(long questionTagId) {
        synchronized (this) {
            if (questionTag_AttachQuestionTagsQuery == null) {
                QueryBuilder<AttachQuestionTag> queryBuilder = queryBuilder();
                queryBuilder.join(AttachQuestionTag.class, AttachQuestionTagDao.Properties.QuestionId)
                    .where(AttachQuestionTagDao.Properties.QuestionTagId.eq(questionTagId));
                questionTag_AttachQuestionTagsQuery = queryBuilder.build();
            }
        }
        Query<AttachQuestionTag> query = questionTag_AttachQuestionTagsQuery.forCurrentThread();
        query.setParameter(0, questionTagId);
        return query.list();
    }

}
