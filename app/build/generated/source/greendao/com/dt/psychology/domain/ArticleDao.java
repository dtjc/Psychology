package com.dt.psychology.domain;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLE".
*/
public class ArticleDao extends AbstractDao<Article, Long> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property ImagesUrl = new Property(2, String.class, "imagesUrl", false, "IMAGES_URL");
        public final static Property Author = new Property(3, String.class, "author", false, "AUTHOR");
        public final static Property LookNums = new Property(4, Integer.class, "lookNums", false, "LOOK_NUMS");
        public final static Property ThanksNums = new Property(5, Integer.class, "thanksNums", false, "THANKS_NUMS");
        public final static Property PublishTime = new Property(6, java.util.Date.class, "publishTime", false, "PUBLISH_TIME");
        public final static Property Content = new Property(7, String.class, "content", false, "CONTENT");
    }


    public ArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"IMAGES_URL\" TEXT," + // 2: imagesUrl
                "\"AUTHOR\" TEXT," + // 3: author
                "\"LOOK_NUMS\" INTEGER," + // 4: lookNums
                "\"THANKS_NUMS\" INTEGER," + // 5: thanksNums
                "\"PUBLISH_TIME\" INTEGER," + // 6: publishTime
                "\"CONTENT\" TEXT);"); // 7: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Article entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String imagesUrl = entity.getImagesUrl();
        if (imagesUrl != null) {
            stmt.bindString(3, imagesUrl);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        Integer lookNums = entity.getLookNums();
        if (lookNums != null) {
            stmt.bindLong(5, lookNums);
        }
 
        Integer thanksNums = entity.getThanksNums();
        if (thanksNums != null) {
            stmt.bindLong(6, thanksNums);
        }
 
        java.util.Date publishTime = entity.getPublishTime();
        if (publishTime != null) {
            stmt.bindLong(7, publishTime.getTime());
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String imagesUrl = entity.getImagesUrl();
        if (imagesUrl != null) {
            stmt.bindString(3, imagesUrl);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        Integer lookNums = entity.getLookNums();
        if (lookNums != null) {
            stmt.bindLong(5, lookNums);
        }
 
        Integer thanksNums = entity.getThanksNums();
        if (thanksNums != null) {
            stmt.bindLong(6, thanksNums);
        }
 
        java.util.Date publishTime = entity.getPublishTime();
        if (publishTime != null) {
            stmt.bindLong(7, publishTime.getTime());
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imagesUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // lookNums
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // thanksNums
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // publishTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImagesUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLookNums(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setThanksNums(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPublishTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Article entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Article entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Article entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
