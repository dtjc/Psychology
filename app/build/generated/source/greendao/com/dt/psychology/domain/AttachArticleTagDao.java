package com.dt.psychology.domain;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTACH_ARTICLE_TAG".
*/
public class AttachArticleTagDao extends AbstractDao<AttachArticleTag, Long> {

    public static final String TABLENAME = "ATTACH_ARTICLE_TAG";

    /**
     * Properties of entity AttachArticleTag.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ArticleId = new Property(1, Long.class, "articleId", false, "ARTICLE_ID");
        public final static Property ArticleTagId = new Property(2, long.class, "articleTagId", false, "ARTICLE_TAG_ID");
    }

    private Query<AttachArticleTag> articleTag_AttachArticleTagsQuery;

    public AttachArticleTagDao(DaoConfig config) {
        super(config);
    }
    
    public AttachArticleTagDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTACH_ARTICLE_TAG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ARTICLE_ID\" INTEGER," + // 1: articleId
                "\"ARTICLE_TAG_ID\" INTEGER NOT NULL );"); // 2: articleTagId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTACH_ARTICLE_TAG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AttachArticleTag entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long articleId = entity.getArticleId();
        if (articleId != null) {
            stmt.bindLong(2, articleId);
        }
        stmt.bindLong(3, entity.getArticleTagId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AttachArticleTag entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long articleId = entity.getArticleId();
        if (articleId != null) {
            stmt.bindLong(2, articleId);
        }
        stmt.bindLong(3, entity.getArticleTagId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AttachArticleTag readEntity(Cursor cursor, int offset) {
        AttachArticleTag entity = new AttachArticleTag( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // articleId
            cursor.getLong(offset + 2) // articleTagId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AttachArticleTag entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArticleId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setArticleTagId(cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AttachArticleTag entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AttachArticleTag entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AttachArticleTag entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "attachArticleTags" to-many relationship of ArticleTag. */
    public List<AttachArticleTag> _queryArticleTag_AttachArticleTags(long articleTagId) {
        synchronized (this) {
            if (articleTag_AttachArticleTagsQuery == null) {
                QueryBuilder<AttachArticleTag> queryBuilder = queryBuilder();
                queryBuilder.join(AttachArticleTag.class, AttachArticleTagDao.Properties.ArticleId)
                    .where(AttachArticleTagDao.Properties.ArticleTagId.eq(articleTagId));
                articleTag_AttachArticleTagsQuery = queryBuilder.build();
            }
        }
        Query<AttachArticleTag> query = articleTag_AttachArticleTagsQuery.forCurrentThread();
        query.setParameter(0, articleTagId);
        return query.list();
    }

}
