// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dt.psychology.dagger2.components;

import android.content.Context;
import com.dt.psychology.dagger2.modules.ActivityModule;
import com.dt.psychology.dagger2.modules.ActivityModule_ProvideActivityContextFactory;
import com.dt.psychology.dagger2.modules.ActivityModule_ProvideArticlePresenterImplFactory;
import com.dt.psychology.dagger2.modules.AppModule;
import com.dt.psychology.dagger2.modules.AppModule_ProvideOkHttpClientFactory;
import com.dt.psychology.dagger2.modules.AppModule_ProvideRetrofitFactory;
import com.dt.psychology.dagger2.modules.AppModule_ProvideSeviceFactory;
import com.dt.psychology.dagger2.modules.FragmentModule;
import com.dt.psychology.presenter.activitis.ArticlePresenter;
import com.dt.psychology.presenter.activitis.ArticlePresenterImpl;
import com.dt.psychology.presenter.activitis.ArticlePresenterImpl_Factory;
import com.dt.psychology.presenter.activitis.ArticlePresenterImpl_MembersInjector;
import com.dt.psychology.test.Sevice;
import com.dt.psychology.ui.MyApplication;
import com.dt.psychology.ui.activities.ArticleActivity;
import com.dt.psychology.ui.activities.ArticleActivity_MembersInjector;
import com.dt.psychology.ui.activities.MainActivity;
import com.dt.psychology.ui.fragments.DiscussionFragment;
import com.dt.psychology.ui.fragments.HomeFragment;
import com.dt.psychology.ui.fragments.PersonalFragment;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<Sevice> provideSeviceProvider;

  private DaggerAppComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideOkHttpClientProvider =
        DoubleCheck.provider(AppModule_ProvideOkHttpClientFactory.create(builder.appModule));

    this.provideRetrofitProvider =
        DoubleCheck.provider(
            AppModule_ProvideRetrofitFactory.create(
                builder.appModule, provideOkHttpClientProvider));

    this.provideSeviceProvider =
        DoubleCheck.provider(
            AppModule_ProvideSeviceFactory.create(builder.appModule, provideRetrofitProvider));
  }

  @Override
  public void inject(MyApplication myApplication) {
    MembersInjectors.<MyApplication>noOp().injectMembers(myApplication);
  }

  @Override
  public ActivityComponent plus(ActivityModule activityModule) {
    return new ActivityComponentImpl(activityModule);
  }

  public static final class Builder {
    private AppModule appModule;

    private Builder() {}

    public AppComponent build() {
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }
  }

  private final class ActivityComponentImpl implements ActivityComponent {
    private final ActivityModule activityModule;

    private Provider<Context> provideActivityContextProvider;

    private MembersInjector<ArticlePresenterImpl> articlePresenterImplMembersInjector;

    private Provider<ArticlePresenterImpl> articlePresenterImplProvider;

    private Provider<ArticlePresenter> provideArticlePresenterImplProvider;

    private MembersInjector<ArticleActivity> articleActivityMembersInjector;

    private ActivityComponentImpl(ActivityModule activityModule) {
      this.activityModule = Preconditions.checkNotNull(activityModule);
      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {

      this.provideActivityContextProvider =
          DoubleCheck.provider(ActivityModule_ProvideActivityContextFactory.create(activityModule));

      this.articlePresenterImplMembersInjector =
          ArticlePresenterImpl_MembersInjector.create(
              provideActivityContextProvider, DaggerAppComponent.this.provideSeviceProvider);

      this.articlePresenterImplProvider =
          ArticlePresenterImpl_Factory.create(articlePresenterImplMembersInjector);

      this.provideArticlePresenterImplProvider =
          DoubleCheck.provider(
              ActivityModule_ProvideArticlePresenterImplFactory.create(
                  activityModule, articlePresenterImplProvider));

      this.articleActivityMembersInjector =
          ArticleActivity_MembersInjector.create(provideArticlePresenterImplProvider);
    }

    @Override
    public void inject(MainActivity mainActivity) {
      MembersInjectors.<MainActivity>noOp().injectMembers(mainActivity);
    }

    @Override
    public void inject(ArticleActivity articleActivity) {
      articleActivityMembersInjector.injectMembers(articleActivity);
    }

    @Override
    public FragmentComponent plus(FragmentModule fragmentModule) {
      return new FragmentComponentImpl(fragmentModule);
    }

    private final class FragmentComponentImpl implements FragmentComponent {
      private final FragmentModule fragmentModule;

      private FragmentComponentImpl(FragmentModule fragmentModule) {
        this.fragmentModule = Preconditions.checkNotNull(fragmentModule);
      }

      @Override
      public void inject(HomeFragment homeFragment) {
        MembersInjectors.<HomeFragment>noOp().injectMembers(homeFragment);
      }

      @Override
      public void inject(PersonalFragment personalFragment) {
        MembersInjectors.<PersonalFragment>noOp().injectMembers(personalFragment);
      }

      @Override
      public void inject(DiscussionFragment discussionFragment) {
        MembersInjectors.<DiscussionFragment>noOp().injectMembers(discussionFragment);
      }
    }
  }
}
