// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dt.psychology.dagger2.modules;

import com.dt.psychology.presenter.fragments.DiscussionFPresenter;
import com.dt.psychology.presenter.fragments.DiscussionFPresenterImpl;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class FragmentModule_ProvideDiscussionFPresenterFactory
    implements Factory<DiscussionFPresenter> {
  private final FragmentModule module;

  private final Provider<DiscussionFPresenterImpl> discussionFPresenterProvider;

  public FragmentModule_ProvideDiscussionFPresenterFactory(
      FragmentModule module, Provider<DiscussionFPresenterImpl> discussionFPresenterProvider) {
    assert module != null;
    this.module = module;
    assert discussionFPresenterProvider != null;
    this.discussionFPresenterProvider = discussionFPresenterProvider;
  }

  @Override
  public DiscussionFPresenter get() {
    return Preconditions.checkNotNull(
        module.provideDiscussionFPresenter(discussionFPresenterProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<DiscussionFPresenter> create(
      FragmentModule module, Provider<DiscussionFPresenterImpl> discussionFPresenterProvider) {
    return new FragmentModule_ProvideDiscussionFPresenterFactory(
        module, discussionFPresenterProvider);
  }

  /** Proxies {@link FragmentModule#provideDiscussionFPresenter(DiscussionFPresenterImpl)}. */
  public static DiscussionFPresenter proxyProvideDiscussionFPresenter(
      FragmentModule instance, DiscussionFPresenterImpl discussionFPresenter) {
    return instance.provideDiscussionFPresenter(discussionFPresenter);
  }
}
